<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Shellming&#39;s Note</title>
    <link>https://shellming.com/tags/javascript/</link>
    <description>Recent content in javascript on Shellming&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 23 Apr 2019 10:39:55 +0000</lastBuildDate>
    
	<atom:link href="https://shellming.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue 项目实现按钮级别权限管理</title>
      <link>https://shellming.com/2019/04/23/vue-permission/</link>
      <pubDate>Tue, 23 Apr 2019 10:39:55 +0000</pubDate>
      
      <guid>https://shellming.com/2019/04/23/vue-permission/</guid>
      <description>&lt;p&gt;在项目中经常有需求要根据用户的权限对界面上的元素进行控制，这里介绍了一直简单的实现，仅供参考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JSONP原理及简单实现</title>
      <link>https://shellming.com/2018/08/30/jsonp-principle-and-simple-implementation/</link>
      <pubDate>Thu, 30 Aug 2018 01:40:13 +0000</pubDate>
      
      <guid>https://shellming.com/2018/08/30/jsonp-principle-and-simple-implementation/</guid>
      <description>&lt;p&gt;&lt;code&gt;JSONP&lt;/code&gt; 全称 JSON with Padding，用于解决 AJAX 跨域问题的一种方案。&lt;/p&gt;
&lt;p&gt;由于同源策略的限制，浏览器只允许 XmlHttpRequest 请求当前源（域名、协议、端口）的资源，而对请求 script 资源没有限制。通过请求 script 标签实现跨域请求，然后在服务端输出 JSON 数据并执行回调函数，这种跨域的数据的方式被称为 JSONP。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JSON格式化校验的方法</title>
      <link>https://shellming.com/2018/07/22/json-format-validate/</link>
      <pubDate>Sun, 22 Jul 2018 16:40:13 +0000</pubDate>
      
      <guid>https://shellming.com/2018/07/22/json-format-validate/</guid>
      <description>&lt;p&gt;Javascript 目前没有提供判断 JSON 数据格式是否正确的方法。
在得到 JSON 数据后，若 JSON 格式错误，程序不能正常解析，抛出 &lt;code&gt;Uncaught SyntaxError&lt;/code&gt; 将导致程序终止运行。在解析 JSON 数据之前进行校验，可避免这种情况的发生。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>重复造轮子：从0开始实现Vue数据绑定</title>
      <link>https://shellming.com/2017/08/02/vue-data-binding/</link>
      <pubDate>Wed, 02 Aug 2017 03:08:36 +0000</pubDate>
      
      <guid>https://shellming.com/2017/08/02/vue-data-binding/</guid>
      <description>&lt;p&gt;随着前端模块化、工程化的进行，Vue, React, Angular 等框架越来越流行，MVC（MVVM）的设计模式也越来深入人心。这类框架将开发者从繁琐的 dom 操作中解放出来，推动了开发者去了解和使用抽象程度更高的领域。包括但不限于数据结构，设计模式，数据流，抽象数据类型，抽象过程等。&lt;/p&gt;
&lt;p&gt;那么这类框架是如何实现数据驱动的呢？ 以 Vue 为例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vue2.4组件间通信新姿势</title>
      <link>https://shellming.com/2017/07/23/new-component-communication-methods-in-vue2_40/</link>
      <pubDate>Sun, 23 Jul 2017 13:08:36 +0000</pubDate>
      
      <guid>https://shellming.com/2017/07/23/new-component-communication-methods-in-vue2_40/</guid>
      <description>&lt;p&gt;Vue 应用在组件化之后，通常存在着 父子组件、兄弟组件、跨级组件 等组件关系，那么组件之间如何进行通信；Vue2.4 提供了两种新的组件通讯方法。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>